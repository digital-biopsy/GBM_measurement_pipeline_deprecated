
######################### Loading and Augmenting Images #########################
Progress:   0%|                                                                                                                           | 0/10 [00:00<?, ?it/s]/usr/local/lib/python3.8/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)
  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)                                                      | 0/182 [00:00<?, ?it/s]
Training: (loss 0.9797):   2%|█▋                                                                                                 | 3/182 [00:00<00:16, 10.79it/s]
######################### Start Training #########################
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True,  True,  True,  ...,  True, False,  True],
         [ True,  True,  True,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True, False, False],
         [ True,  True,  True,  ..., False, False, False],
         [ True,  True,  True,  ...,  True, False, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [False, False,  True,  ...,  True,  True, False],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False, False,  ...,  True, False, False],
         [ True,  True, False,  ...,  True,  True, False],
         [ True,  True, False,  ...,  True,  True, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True, False, False,  ..., False, False,  True],
         [ True, False, False,  ..., False,  True,  True],
         ...,
         [ True, False,  True,  ...,  True,  True, False],
         [False,  True, False,  ..., False,  True,  True],
         [ True,  True, False,  ..., False,  True, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True, False],
         [ True, False, False,  ...,  True,  True,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True, False, False],
         [ True,  True,  True,  ..., False, False, False],

Training: (loss 0.8029):  10%|█████████▋                                                                                        | 18/182 [00:02<00:18,  8.75it/s]
tensor([[[ True,  True,  True,  ..., False, False, False],
         [ True,  True, False,  ...,  True,  True,  True],
         [ True, False, False,  ..., False, False,  True],
         ...,
         [ True, False,  True,  ...,  True, False, False],
         [ True,  True, False,  ..., False,  True, False],
         [ True, False, False,  ...,  True, False, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True,  True, False,  ..., False,  True,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True,  True,  True],
         [ True,  True, False,  ...,  True, False, False],
         [ True,  True,  True,  ..., False, False, False]]], device='cuda:0')
tensor([[[False,  True,  True,  ...,  True,  True,  True],
         [ True, False,  True,  ..., False, False, False],
         [ True,  True, False,  ..., False, False, False],
         ...,
         [ True,  True,  True,  ...,  True,  True, False],
         [ True,  True,  True,  ..., False,  True, False],
         [ True,  True,  True,  ..., False, False, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True, False, False,  ...,  True,  True,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True,  True, False],
         [ True,  True,  True,  ...,  True,  True, False],
         [ True,  True, False,  ...,  True, False, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True,  True,  True,  ...,  True,  True, False],
         [ True,  True,  True,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True,  True, False],
         [ True,  True,  True,  ..., False,  True, False],
         [False, False,  True,  ...,  True,  True, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True, False, False,  ...,  True,  True,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True,  True,  True],
         [ True,  True,  True,  ...,  True,  True,  True],
         [ True,  True,  True,  ...,  True,  True, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True,  True, False,  ...,  True,  True,  True],
         [ True, False, False,  ...,  True, False, False],
         ...,
         [ True, False, False,  ...,  True,  True,  True],
         [ True,  True, False,  ..., False,  True, False],
         [ True,  True,  True,  ...,  True, False, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True, False, False,  ..., False, False,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True, False, False],
         [ True,  True,  True,  ..., False, False, False],
         [ True,  True,  True,  ...,  True, False, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True, False,  True,  ...,  True, False,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True,  True,  True,  ..., False,  True, False],
         [ True,  True,  True,  ..., False,  True, False],
         [ True,  True, False,  ..., False, False, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [ True, False,  True,  ...,  True,  True,  True],
         [ True,  True, False,  ...,  True,  True,  True],
         ...,
         [ True,  True,  True,  ...,  True,  True,  True],
         [ True,  True,  True,  ...,  True,  True,  True],
         [False,  True,  True,  ..., False,  True, False]]], device='cuda:0')
tensor([[[ True,  True,  True,  ...,  True,  True,  True],
         [False, False, False,  ..., False, False,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True, False, False],
         [ True,  True,  True,  ..., False, False, False],
         [False, False, False,  ...,  True,  True, False]]], device='cuda:0')
tensor([[[ True,  True, False,  ...,  True,  True,  True],
         [False,  True,  True,  ..., False, False,  True],
         [ True, False,  True,  ..., False, False,  True],
         ...,
         [ True, False,  True,  ...,  True,  True, False],
         [ True,  True,  True,  ..., False, False, False],
         [ True, False, False,  ...,  True, False, False]]], device='cuda:0')
tensor([[[False,  True,  True,  ...,  True,  True,  True],
         [False, False,  True,  ...,  True,  True,  True],
         [ True, False, False,  ...,  True, False, False],
         ...,
         [ True,  True,  True,  ...,  True,  True, False],
         [ True,  True,  True,  ..., False, False, False],
         [ True, False, False,  ...,  True, False, False]]], device='cuda:0')
tensor([[[False,  True,  True,  ...,  True,  True,  True],
         [False,  True, False,  ..., False, False,  True],
         [ True, False, False,  ..., False, False, False],
         ...,
         [ True, False,  True,  ...,  True,  True,  True],
         [ True,  True,  True,  ...,  True,  True,  True],
Traceback (most recent call last):
  File "main.py", line 94, in <module>
    init_and_train_model(args.verbose)
  File "main.py", line 65, in init_and_train_model
    DeepSeg.train_model()
  File "/root/research/deep-segmentation/segmentation/unet/segmentation.py", line 246, in train_model
    training_losses, validation_losses, lr_rates = trainer.run_trainer()
  File "/root/research/deep-segmentation/segmentation/unet/trainer.py", line 59, in run_trainer
    self._train()
  File "/root/research/deep-segmentation/segmentation/unet/trainer.py", line 88, in _train
    for i, (x, y) in batch_iter:
  File "/usr/local/lib/python3.8/dist-packages/tqdm/std.py", line 1180, in __iter__
    for obj in iterable:
  File "/usr/local/lib/python3.8/dist-packages/torch/utils/data/dataloader.py", line 521, in __next__
    data = self._next_data()
  File "/usr/local/lib/python3.8/dist-packages/torch/utils/data/dataloader.py", line 561, in _next_data
    data = self._dataset_fetcher.fetch(index)  # may raise StopIteration
  File "/usr/local/lib/python3.8/dist-packages/torch/utils/data/_utils/fetch.py", line 47, in fetch
    return self.collate_fn(data)
  File "/usr/local/lib/python3.8/dist-packages/torch/utils/data/_utils/collate.py", line 84, in default_collate
    return [default_collate(samples) for samples in transposed]
  File "/usr/local/lib/python3.8/dist-packages/torch/utils/data/_utils/collate.py", line 84, in <listcomp>
    return [default_collate(samples) for samples in transposed]
  File "/usr/local/lib/python3.8/dist-packages/torch/utils/data/_utils/collate.py", line 56, in default_collate
    return torch.stack(batch, 0, out=out)
KeyboardInterrupt