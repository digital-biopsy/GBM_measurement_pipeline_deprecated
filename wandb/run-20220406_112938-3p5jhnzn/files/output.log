[34m[1mwandb[39m[22m: [33mWARNING[39m Saving files without folders. If you want to preserve sub directories pass base_path to wandb.save, i.e. wandb.save("/mnt/folder/file.h5", base_path="/mnt")
Progress:   0%|                                                                                               | 0/1 [00:00<?, ?it/s]























Validation: (loss 0.5927):  84%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ           | 47/56 [00:09<00:01,  5.27it/s]
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1         [-1, 64, 512, 512]             640
              ReLU-2         [-1, 64, 512, 512]               0
       BatchNorm2d-3         [-1, 64, 512, 512]             128
            Conv2d-4         [-1, 64, 512, 512]          36,928
              ReLU-5         [-1, 64, 512, 512]               0
       BatchNorm2d-6         [-1, 64, 512, 512]             128
         MaxPool2d-7         [-1, 64, 256, 256]               0
         DownBlock-8  [[-1, 64, 256, 256], [-1, 64, 512, 512]]               0
            Conv2d-9        [-1, 128, 256, 256]          73,856
             ReLU-10        [-1, 128, 256, 256]               0
      BatchNorm2d-11        [-1, 128, 256, 256]             256
           Conv2d-12        [-1, 128, 256, 256]         147,584
             ReLU-13        [-1, 128, 256, 256]               0
      BatchNorm2d-14        [-1, 128, 256, 256]             256
        MaxPool2d-15        [-1, 128, 128, 128]               0
        DownBlock-16  [[-1, 128, 128, 128], [-1, 128, 256, 256]]               0
           Conv2d-17        [-1, 256, 128, 128]         295,168
             ReLU-18        [-1, 256, 128, 128]               0
      BatchNorm2d-19        [-1, 256, 128, 128]             512
           Conv2d-20        [-1, 256, 128, 128]         590,080
             ReLU-21        [-1, 256, 128, 128]               0
      BatchNorm2d-22        [-1, 256, 128, 128]             512
        MaxPool2d-23          [-1, 256, 64, 64]               0
        DownBlock-24  [[-1, 256, 64, 64], [-1, 256, 128, 128]]               0
           Conv2d-25          [-1, 512, 64, 64]       1,180,160
             ReLU-26          [-1, 512, 64, 64]               0
      BatchNorm2d-27          [-1, 512, 64, 64]           1,024
           Conv2d-28          [-1, 512, 64, 64]       2,359,808
             ReLU-29          [-1, 512, 64, 64]               0
      BatchNorm2d-30          [-1, 512, 64, 64]           1,024
        DownBlock-31  [[-1, 512, 64, 64], [-1, 512, 64, 64]]               0
  ConvTranspose2d-32        [-1, 256, 128, 128]         524,544
             ReLU-33        [-1, 256, 128, 128]               0
      BatchNorm2d-34        [-1, 256, 128, 128]             512
      Concatenate-35        [-1, 512, 128, 128]               0
           Conv2d-36        [-1, 256, 128, 128]       1,179,904
             ReLU-37        [-1, 256, 128, 128]               0
      BatchNorm2d-38        [-1, 256, 128, 128]             512
           Conv2d-39        [-1, 256, 128, 128]         590,080
             ReLU-40        [-1, 256, 128, 128]               0
      BatchNorm2d-41        [-1, 256, 128, 128]             512
          UpBlock-42        [-1, 256, 128, 128]               0
  ConvTranspose2d-43        [-1, 128, 256, 256]         131,200
             ReLU-44        [-1, 128, 256, 256]               0
      BatchNorm2d-45        [-1, 128, 256, 256]             256
      Concatenate-46        [-1, 256, 256, 256]               0
           Conv2d-47        [-1, 128, 256, 256]         295,040
             ReLU-48        [-1, 128, 256, 256]               0
      BatchNorm2d-49        [-1, 128, 256, 256]             256
           Conv2d-50        [-1, 128, 256, 256]         147,584
             ReLU-51        [-1, 128, 256, 256]               0
      BatchNorm2d-52        [-1, 128, 256, 256]             256
          UpBlock-53        [-1, 128, 256, 256]               0
  ConvTranspose2d-54         [-1, 64, 512, 512]          32,832
             ReLU-55         [-1, 64, 512, 512]               0
      BatchNorm2d-56         [-1, 64, 512, 512]             128
      Concatenate-57        [-1, 128, 512, 512]               0
           Conv2d-58         [-1, 64, 512, 512]          73,792
             ReLU-59         [-1, 64, 512, 512]               0
      BatchNorm2d-60         [-1, 64, 512, 512]             128
           Conv2d-61         [-1, 64, 512, 512]          36,928
             ReLU-62         [-1, 64, 512, 512]               0
      BatchNorm2d-63         [-1, 64, 512, 512]             128
          UpBlock-64         [-1, 64, 512, 512]               0
           Conv2d-65          [-1, 2, 512, 512]             130
          Sigmoid-66          [-1, 2, 512, 512]               0
================================================================
Total params: 7,702,786
Trainable params: 7,702,786
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 1.00
Forward/backward pass size (MB): 738193312.00
Params size (MB): 29.38
Estimated Total Size (MB): 738193342.38
----------------------------------------------------------------
[32m######################### Loading and Augmenting Images #########################
[34m[1mwandb[39m[22m: [33mWARNING[39m Saving files without folders. If you want to preserve sub directories pass base_path to wandb.save, i.e. wandb.save("/mnt/folder/file.h5", base_path="/mnt")
Progress:   0%|                                                                                               | 0/1 [00:00<?, ?it/s]
Training:   0%|                                                                                             | 0/224 [00:00<?, ?it/s]

























Progress: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1/1 [00:47<00:00, 47.92s/it]
----------------------------------------------------------------
        Layer (type)               Output Shape         Param #
================================================================
            Conv2d-1         [-1, 64, 512, 512]             640
              ReLU-2         [-1, 64, 512, 512]               0
       BatchNorm2d-3         [-1, 64, 512, 512]             128
            Conv2d-4         [-1, 64, 512, 512]          36,928
              ReLU-5         [-1, 64, 512, 512]               0
       BatchNorm2d-6         [-1, 64, 512, 512]             128
         MaxPool2d-7         [-1, 64, 256, 256]               0
         DownBlock-8  [[-1, 64, 256, 256], [-1, 64, 512, 512]]               0
            Conv2d-9        [-1, 128, 256, 256]          73,856
             ReLU-10        [-1, 128, 256, 256]               0
      BatchNorm2d-11        [-1, 128, 256, 256]             256
           Conv2d-12        [-1, 128, 256, 256]         147,584
             ReLU-13        [-1, 128, 256, 256]               0
      BatchNorm2d-14        [-1, 128, 256, 256]             256
        MaxPool2d-15        [-1, 128, 128, 128]               0
        DownBlock-16  [[-1, 128, 128, 128], [-1, 128, 256, 256]]               0
           Conv2d-17        [-1, 256, 128, 128]         295,168
             ReLU-18        [-1, 256, 128, 128]               0
      BatchNorm2d-19        [-1, 256, 128, 128]             512
           Conv2d-20        [-1, 256, 128, 128]         590,080
             ReLU-21        [-1, 256, 128, 128]               0
      BatchNorm2d-22        [-1, 256, 128, 128]             512
        MaxPool2d-23          [-1, 256, 64, 64]               0
        DownBlock-24  [[-1, 256, 64, 64], [-1, 256, 128, 128]]               0
           Conv2d-25          [-1, 512, 64, 64]       1,180,160
             ReLU-26          [-1, 512, 64, 64]               0
      BatchNorm2d-27          [-1, 512, 64, 64]           1,024
           Conv2d-28          [-1, 512, 64, 64]       2,359,808
             ReLU-29          [-1, 512, 64, 64]               0
      BatchNorm2d-30          [-1, 512, 64, 64]           1,024
        DownBlock-31  [[-1, 512, 64, 64], [-1, 512, 64, 64]]               0
  ConvTranspose2d-32        [-1, 256, 128, 128]         524,544
             ReLU-33        [-1, 256, 128, 128]               0
      BatchNorm2d-34        [-1, 256, 128, 128]             512
      Concatenate-35        [-1, 512, 128, 128]               0
           Conv2d-36        [-1, 256, 128, 128]       1,179,904
             ReLU-37        [-1, 256, 128, 128]               0
      BatchNorm2d-38        [-1, 256, 128, 128]             512
           Conv2d-39        [-1, 256, 128, 128]         590,080
             ReLU-40        [-1, 256, 128, 128]               0
      BatchNorm2d-41        [-1, 256, 128, 128]             512
          UpBlock-42        [-1, 256, 128, 128]               0
  ConvTranspose2d-43        [-1, 128, 256, 256]         131,200
             ReLU-44        [-1, 128, 256, 256]               0
      BatchNorm2d-45        [-1, 128, 256, 256]             256
      Concatenate-46        [-1, 256, 256, 256]               0
           Conv2d-47        [-1, 128, 256, 256]         295,040
             ReLU-48        [-1, 128, 256, 256]               0
      BatchNorm2d-49        [-1, 128, 256, 256]             256
           Conv2d-50        [-1, 128, 256, 256]         147,584
             ReLU-51        [-1, 128, 256, 256]               0
      BatchNorm2d-52        [-1, 128, 256, 256]             256
          UpBlock-53        [-1, 128, 256, 256]               0
  ConvTranspose2d-54         [-1, 64, 512, 512]          32,832
             ReLU-55         [-1, 64, 512, 512]               0
      BatchNorm2d-56         [-1, 64, 512, 512]             128
      Concatenate-57        [-1, 128, 512, 512]               0
           Conv2d-58         [-1, 64, 512, 512]          73,792
             ReLU-59         [-1, 64, 512, 512]               0
      BatchNorm2d-60         [-1, 64, 512, 512]             128
           Conv2d-61         [-1, 64, 512, 512]          36,928
             ReLU-62         [-1, 64, 512, 512]               0
      BatchNorm2d-63         [-1, 64, 512, 512]             128
          UpBlock-64         [-1, 64, 512, 512]               0
           Conv2d-65          [-1, 2, 512, 512]             130
          Sigmoid-66          [-1, 2, 512, 512]               0
================================================================
Total params: 7,702,786
Trainable params: 7,702,786
Non-trainable params: 0
----------------------------------------------------------------
Input size (MB): 1.00
Forward/backward pass size (MB): 738193312.00
Params size (MB): 29.38
Estimated Total Size (MB): 738193342.38
----------------------------------------------------------------
[32m######################### Loading and Augmenting Images #########################
Process ForkPoolWorker-88:
Process ForkPoolWorker-92:
Process ForkPoolWorker-91:
Process ForkPoolWorker-90:
Process ForkPoolWorker-85:
Process ForkPoolWorker-86:
Process ForkPoolWorker-83:
Process ForkPoolWorker-82:
Process ForkPoolWorker-84:
Process ForkPoolWorker-87:
Process ForkPoolWorker-89:
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
KeyboardInterrupt
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
KeyboardInterrupt
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 356, in get
    res = self._reader.recv_bytes()
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 414, in _recv_bytes
    buf = self._recv(4)
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
Exception ignored in: <function _releaseLock at 0x7fa2b2d4d160>
Traceback (most recent call last):
  File "/usr/lib/python3.8/logging/__init__.py", line 227, in _releaseLock
    def _releaseLock():
KeyboardInterrupt:
Process ForkPoolWorker-97:
Process ForkPoolWorker-96:
Process ForkPoolWorker-95:
Process ForkPoolWorker-94:
Process ForkPoolWorker-93:
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
KeyboardInterrupt
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
KeyboardInterrupt
Traceback (most recent call last):
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 114, in worker
    task = get()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 356, in get
    res = self._reader.recv_bytes()
  File "/usr/lib/python3.8/multiprocessing/queues.py", line 355, in get
    with self._rlock:
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 216, in recv_bytes
    buf = self._recv_bytes(maxlength)
  File "/usr/lib/python3.8/multiprocessing/synchronize.py", line 95, in __enter__
    return self._semlock.__enter__()
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 414, in _recv_bytes
    buf = self._recv(4)
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
KeyboardInterrupt
Traceback (most recent call last):
  File "main.py", line 118, in <module>
    # parser.add_argument('--integers', type=str, help='epoch num to continue training')
  File "main.py", line 95, in ask_if_proceed
    )
  File "main.py", line 41, in k_fold
    save_dir = 'fold_%s/' % str(current_fold)
  File "main.py", line 67, in init_and_train_model
    def train_model(DeepSeg, save_dir):
  File "/root/research/deep-segmentation/segmentation/unet/unet_seg.py", line 177, in load_and_augment
    dataset_valid = SegmentationDataSet3(
  File "/root/research/deep-segmentation/segmentation/unet/customdatasets3.py", line 37, in __init__
    self.cached_data = pool.starmap(self.read_images, zip(inputs, targets, repeat(self.pre_transform)))
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 736, in __exit__
    self.terminate()
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 654, in terminate
    self._terminate()
  File "/usr/lib/python3.8/multiprocessing/util.py", line 224, in __call__
    res = self._callback(*self._args, **self._kwargs)
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 692, in _terminate_pool
    cls._help_stuff_finish(inqueue, task_handler, len(pool))
  File "/usr/lib/python3.8/multiprocessing/pool.py", line 672, in _help_stuff_finish
    inqueue._rlock.acquire()
KeyboardInterrupt